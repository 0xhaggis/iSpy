<link href="/static/css/iSpy.datatables.css" rel="stylesheet" type="text/css" />
<link rel="stylesheet" href="/static/font-awesome/css/font-awesome.min.css">

<div class="hide" id="msgSendMenu">
	<ul class="nav" role="navigation">
		<li class="dropdown">
			<a id="drop1" href="#" role="button" class="dropdown-toggle" data-toggle="dropdown">Messages<b class="caret"></b></a>
			<ul class="dropdown-menu" role="menu" aria-labelledby="drop1">
				<li role="presentation"><a role="menuitem" tabindex="-1" href="#whitelist">Whitelist</a></li>
				<li role="presentation"><a role="menuitem" tabindex="-1" href="#blacklist">Blacklist</a></li>
				<li role="presentation"><a role="menuitem" tabindex="-1" href="#other">Other options</a></li>
				<li role="presentation" class="divider"></li>
				<li role="presentation"><a role="menuitem" tabindex="-1" href="/classdump">Clear log</a></li>
			</ul>
		</li>
	</ul>
</div>

<!-- Utility buttons at the top of the log window -->
<div class="container-fluid">
<div class="row" id="spinner">
	<div class="span12">
		<legend>objc_msgSend Monitor &nbsp; <i class="icon-spinner icon-spin icon-large"></i></legend>
	</div>
</div>

<!--
	This is the table used for DataTables. It displays scrollable, paginated data from the iSpy daemon.
-->
<div id="tableDiv" class="hide">
<!--
	<button type="button" class="btn" data-toggle="button" id="btnScroll" data-complete-text="Scrolling is paused" autocomplete="off">Auto scrolling</button>
    <button type="button" class="btn" data-loading-text="Loading log..." id="btnReload" autocomplete="off">Reload entire log</button>
    <a href="#myModal" role="button" class="btn" data-toggle="modal">Options</a>
    <a href="#" class="btn" id="btnFilters" data-toggle="popover" title="Configure Filters" data-content="Combine the following filters to narrow down the data you need.">Filters</a>
    <button type="button" class="btn pull-right" data-loading-text="Clearing log..." id="btnClear" autocomplete="off">Clear log</button>

-->	
	<table cellpadding="0" cellspacing="0" border="0" class="display" id="iSpyDataTable" width="100%">
		<thead>
			<tr>
				<th width="2%">#</th>
				<th width="1%"></th>
				<th>Class</th>
				<th>Method</th>
				<th>Instance</th>
				<th>Parameters</th>
			</tr>
		</thead>
		<tbody id="tableBody">
		</tbody>
		<tfoot>
			<tr>
				<th width="2%">#</th>
				<th width="1%"></th>
				<th>Class</th>
				<th>Method</th>
				<th>Instance</th>
				<th>Parameters</th>
			</tr>
		</tfoot>
	</table>
</div>

<!-- This is the "options" modal dialog -->
<div id="myModal" class="modal hide" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-header">
		<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
		<h3 id="myModalLabel">objc_msgSend Monitoring Options</h3>
	</div>
	<form id="optionsForm" class="form-horizontal" action="/api/msgSend/options" method="POST">
	<div class="modal-body">
		<p>
		    <div class="control-group">
			    <label class="control-label" for="enableDisable">Enabled</label>
			    <div class="controls">
			    	<input type="checkbox" name="enableDisable" id="enableDisable">
		    	</div>
		    </div>
		    <div class="control-group">
			    <label class="control-label" for="restrictToAppBundle">Restrict to app bundle<br>
			    </label>
			    <div class="controls">
			    	<input type="checkbox" name="restrictToAppBundle" id="restrictToAppBundle"><br>
			    	<span class="muted">
			    		Enabling this setting will cause objc_msgSend logging to log only classes/methods defined in the current app bundle.<br>
			    		Disabling this setting will log every call to every method of every class used by the app, including all the built-in
			    		Apple frameworks and objects, such as NSString, etc. This gets very, very verbose and is usually not what you want.
			    	</span>
			    	<input type="text" name="foo" value="foobar" id="fo12">
			    </div>
	    	</div>
		</p>
	</div>
	<div class="modal-footer">
		<a onclick="$('#myModal').modal('hide')" href="#" class="btn">Cancel</a>
		<input type="submit" class="btn btn-primary" id="btnSubmit" value="Save">
	</div>
	</form>
</div>

<!-- Make the standard Bootstrap modal a little wider and taller to fit the class information more readably. -->
<style>
#infoModal .modal-body {
	max-height: 600px;
}
#infoModal {
	width: 900px;
	margin: -350px 0 0 -450px;
}
</style>

<!-- This is the "info" modal dialog -->
<div id="infoModal" class="modal hide" tabindex="-1" role="dialog" aria-labelledby="myInfoModalLabel" aria-hidden="false" width="75%">
	<div class="modal-header">
		<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
		<h3 id="infoHeader"></h3>
	</div>
	<div class="modal-body" id="infoBody">
	</div>
</div>



<!-- This is the "blacklist" modal dialog -->
<div id="methodBlacklistModal" class="modal hide" tabindex="-1" role="dialog" aria-labelledby="methodBlacklistModalLabel" aria-hidden="true">
	<div class="modal-header">
		<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
		<h3 id="blacklistHeader">Blacklisted Methods</h3>
	</div>
	<div class="modal-body" id="infoBody">
	</div>
</div>

<style>
@import "/static/DataTables/media/css/jquery.dataTables.css";
</style>

<!--
	JavaScript :-) What a beautiful programming language.
-->

<script src="/static/DataTables/media/js/jquery.dataTables.js"></script>
<link href="/static/google-code-prettify/prettify.css" rel="stylesheet" type="text/css" />
<script src="/static/google-code-prettify/prettify.js"></script>
<script src="/static/js/common.js"></script>
<script src="/static/jquery-ui-1.10.4.custom/jquery-ui-1.10.4.custom.min.js"></script>

<script>
var classCounter = 0;
var methodCounter = 0;
var foundMethod = "foo";
var found = false;
var matches = 0;
var savedClassId = 0;
var searchClass;
var newLogEntries = [];
var defJSON = '{"logs":[';
var newJSON = defJSON;

// This is called to create and display a Bootstrap popover when the user clicks on a method name.
function show_method_popover(obj) {
	obj = $(obj).closest('tr');
	element = $('td:eq(3) > a', obj);
	var methodName = element.html();
	var className = $('td:eq(2)', obj).html();
	var methodType = $('td:eq(1)', obj).html();
	var popovercontent = "";

	popovercontent = "Called as:<br><?prettify?><pre class='prettyprint'>" + methodType + "[" + className + " " + methodName + "]</pre>\n";

	// Get method data
	var m = method_in_class(methodName, className);
	// if method is inherited (eg, the above call returned undefined), indicate this to the user
	if(m == undefined) {
		popovercontent += '<center><img src="/static/images/down.png"> Inherited from</center><br>';
		popovercontent += "<?prettify?><pre class='prettyprint'>" + methodType + "[" + "UnknownSuperClass" + " " + methodName + "]</pre>\n";
		var methods = methods_by_name(methodName);
	} else {
		methods = [];
		methods.push(m);
	}

	if(methods.length == 0) {
		popovercontent = "This method is inherited from a super class. This is a work in progress.";
	} else {
		// Loop through the matching methods (or just single method) and render the @interface data.
		var i = 0;
		do {
			m = methods[i];
			c = class_by_id(m["classId"]);
			popovercontent += "Declared in:<br><?prettify?><pre class='prettyprint'>";
			popovercontent += "@interface " + c["name"] + " {\n...\n}\n";
			popovercontent += (m["isInstanceMethod"])?"-":"+";
			popovercontent += "(" + m["returnType"] + ")";

			var params = params_for_method(m);
			if(params.length == 0)
				popovercontent += " " + methodName;
			for(var j = 0; j < params.length; j++) {
				popovercontent += " " + params[j]["name"] + ":(" + params[j]["type"] + ")" + "arg" + (j+1);
			}

			popovercontent += ";\n@end";
			popovercontent += "</pre>";
			i++;
		} while(i < methods.length);		
	}

	

	// Show the rendered info to the user
	$("#infoBody").html(popovercontent);
	$("#infoHeader").html("Method Info");
	prettyPrint();
	$("#infoModal").modal('show');
	return;

	/*
	element.on('mouseout', function() {
		element.popover('hide');
	});

	element.popover({
		trigger: "manual",
		html: true,
		template: '<div class="popover" style="width: 500px"><div class="arrow"></div><div class="popover-inner"><div class="popover-content"><p></p></div></div></div>',
		content: popovercontent
	});
	element.popover('show');
	prettyPrint();
	return;
*/
}


// This is called to create and display a Bootstrap modal dialog when the user clicks on a class name.
function show_class_popover(obj) {
	$("#infoHeader").html("Class Info");
	$("#infoBody").html('<div id="loading">Loading... &nbsp; <i class="icon-spinner icon-spin icon-large"></i></div>');
	$("#infoModal").modal('show');

	obj = $(obj).closest('tr');
	element = $('td:eq(2) > a', obj);
	var className = element.html();
	var popovercontent = "<?prettify?><pre class='prettyprint'>";

	popovercontent += render_classdump_html_for_class(className);
	popovercontent += "</pre>";

	// Show the rendered info to the user
	$("#infoBody").html(popovercontent);
	prettyPrint();
	return;
}


$(document).ready(function() {

	$('#menuItems').append($('#msgSendMenu').html());
	$('#tableDiv').css('height', '' + resolveFullHeight("#tableDiv")-140 + 'px');
    
    $('#iSpyDataTable').dataTable( {
        "sScrollY": resolveFullHeight("#iSpyDataTable") - 140,
        "sScrollYInner": "110%",
        "oLanguage": {
            "sZeroRecords": ""
        },
        "bPaginate": true,
        "sPaginationType": "full_numbers",
        "bProcessing": true,
		"bScrollCollapse": false,
		"bJQueryUI": true,
		"aLengthMenu": [[1000, 10000, 25000, -1], [1000, 10000, 25000, "All (slow)"]],
		"iDisplayLength": 1000,
		"bAutoWidth": false,
		"bVisible": false,
		"sDom": '<"H"zlfr>t<"F"ip>',
		//"sDom": '<"H"fr>t<"F"iS>',
		"fnCreatedRow": function( nRow, aData, iDataIndex ) {
			var className = aData[2];
			var methodName = aData[3];
			var methodType = aData[1];
			var a = $(document.createElement('a'));
			$(a).addClass("classContextInfo");
			$(a).attr("data-className", className);
			$(a).html(className);
			//$('td:eq(3)', nRow).html('<a href="#" data-toggle="popover" onclick="show_method_popover(this)">' + methodName + '</a>');
			$('td:eq(3)', nRow).html(methodName);
			//$('td:eq(2)', nRow).html('<a href="#" data-toggle="popover" onclick="show_class_popover(this)">' + className + '</a>');
			$('td:eq(2)', nRow).html(a);

		}
	}).fnFilterOnReturn();

	// Customized filtering.
	// We filter out any non-app methods (ie. a method that belongs to a non-app Class).
	/*
	$.fn.dataTableExt.afnFiltering.push( function( oSettings, aData, iDataIndex ) {
		classMethods = iSpyClassesByName[aData[2]]["methods"];
		// if this class has no methods, filter out this call fromt he results table
		if(classMethods === undefined)
			return false;
		// double check for sanity
		if(classMethods.length <= 0)
			return false;
		// if the method's not in one of our classes, filter it out
		if(classMethods.indexOf(aData[3]) == -1)
			return false;
		// if the method has been blacklisted by the user then filter it out
		if(blacklistedMethods.indexOf(aData[3]) != -1)
			return false;

		return true;
	});
*/


/*
	// If the user clicks on a row in the table, this will fire
	$("#iSpyDataTable tbody").delegate("tr", "click", function() {
		var element = $('td:eq(3) > a', this);
		console.log(element);
		var methodName = $('td:eq(3)', this).html();
		var className = $('td:eq(2)', this).html();
		var methodType = $('td:eq(1)', this).html();
		element.on('mouseout', function() { element.popover('hide'); });
		element.popover({
			trigger: "manual",
			html: true,
			delay: { show: 500, hide: 100 },
			//template: '<div class="popover" style="width: 500px"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"><p></p></div></div></div>',
			template: '<div class="popover" style="width: 500px"><div class="arrow"></div><div class="popover-inner"><div class="popover-content"><p></p></div></div></div>',
			content: "<?prettify?><pre class='prettyprint'>" + methodType + "[" + className + " " + methodName + "]" + "</pre>"
		});
		element.popover('show');
		prettyPrint();
	});
*/

	// Setup a timer to update the UI with new log entries every couple of seconds (if logging is enabled)
	// This runs in a background worker thread
	intervalId = setInterval('updateLog()', 2000); 
	setupWebSockets();
    // Open the websocket
	
});

function setupWebSockets() {
	socket = socket_connect(31338);

	if(socket) {
		socket.onopen = function(event) {
			if(socket.readyState == WebSocket.OPEN)
				socket.send("hi");

			// Listen for messages
			socket.onmessage = function(event) {
				newJSON += event.data.replace(/\n/, ''); // + ",";
			};
			
			// Listen for socket closes
			socket.onclose = function(event) {
				console.log('Client notified socket has closed',event);
				socket = undefined;
			};
			// Listen for socket closes
			socket.onerror = function(event) {
				console.log('Client notified socket error',event);
			};
		};
	} else {
		console.log("Bleh");
	}
}
// this is called when we press "save" in the "options" modal popup 
// it sends updates to the iSpy server and dismisses the modal
function saveChanges() {
	var foo = $("#optionsForm").serialize();
	$.post("/api/msgSend/options", foo);
	$("#myModal").modal("hide");
	return false;
}

// called every second to update the log entries on screen
// we batch the incoming websocket messages and chuck 'em to the screen once in a while

function updateLog() {
	
	if(socket === undefined || socket.readyState === undefined || socket.readyState != WebSocket.OPEN)  {
		setupWebSockets();
		return;
	}

	socket.send("."); // keepalive	
	
	var savedScroll = $('.dataTables_scrollBody').scrollTop();
	
	// don't try to read the log if it's disabled
	if( ! $("#btnmsgSendState").is('.active') ) // these are defined/set in menu.mustache
		return;

	// don't try to read the log if we're already reading the log
	if(requestLock)
		return;

	// this is so horrible. When a research project becomes a tool...
	if(newJSON == '{"logs":[')
		return;

	requestLock=1;
	foo = newJSON.substring(0, newJSON.length - 1) + "]}";
	newJSON = defJSON;
	try {
		var obj = $.parseJSON(foo);

		$('#iSpyDataTable').dataTable().fnAddData(obj.logs);
	} catch(e) { 
		requestLock = 0;
		return; 
	}
	
	// restore the saved scroll position after DataTables scrolls to the top after data refresh.
	$('.dataTables_scrollBody').scrollTop(savedScroll);
	
	// This could, in theory, race with socket.onmessage() and we could lose some event data.
	requestLock=0;
}

$(document).ready(function () {
	// don't make ajax requests during an ajax request; this var acts as a lock
	requestLock=0;

	// Make the scrollable log panel nice n pretty
	$("#iSpyDataTable").css({
		"border": "1px solid #cecece", 
		"-webkit-border-radius": "10px", 
		"-moz-border-radius": "10px", 
		"border-radius": "10px"
	});

	// Show the table/log
	$("#tableDiv").removeClass("hide");
	$("#spinner").addClass("hide");

	// We use a popover for filters; initialize it now
	$("#btnFilters").popover({trigger: 'click'});

	// Setup the "save" button for the "options" modal
	$("#optionsForm").submit(function () {
		return saveChanges();
	});

	// handler for the "reload entire log" button
	$("#btnReload").on("click", function () {
		$("#btnReload").button('loading');
		$.get("/api/msgSend/readentirelog", function(data) {
			$("#logWindow").append(data);
			if(autoScroll)
				$("#logWindow").scrollTop($("#logWindow")[0].scrollHeight);
			$("#logWindow").html("");
			$("#btnReload").button('reset');
			requestLock=0;
		});
	});

	// handler for "clear log"
	$("#btnClear").on("click", function () {
		requestLock=1;
		$("#btnClear").button('loading');
		$.post("/api/msgSend/clearLog", function (data) {
			$("#logWindow").html("");
			$("#btnClear").button('reset');
			requestLock=0;
		});
	});
});

	

</script>
