<link href="/static/google-code-prettify/prettify.css" rel="stylesheet" type="text/css" />
<script src="/static/google-code-prettify/prettify.js"></script>
<script src="/static/js/jquery.ajaxQueue.min.js"></script>
<script src="/static/js/common.js"></script>

<style>
.popover {
	width: 700px;
	max-width: 700px;
	height:500px;
	overflow: auto;
}
</style>

<div class="row-fluid">
	<div class="span12">
		<legend>Class Dump &nbsp; <span id="spinner"><i class="fa fa-refresh fa-spin fadeIn animated"></i></span>
		<div id="progressBarWrapper" class="progress progress-info fadeIn animated">
    		<div class="progress-bar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"  role="progressbar" id="progressBar" style="width: 0%;">
    		</div>
    	</div>
    	</legend>
	</div>
</div>

<div class="animated fadeIn hide" id="controlsDiv">
	    <a class="btn" id="btnExpandAll" href="#" data-toggle="tooltip" data-original-title="Expand all of the data for all the classes">Expand all</a>
</div>

<div id="dumpDiv" class="animated fadeIn hide">
	<?prettify?><pre id='dumpArea' class='prettyprint'></pre>
</div>

<div id="fooBar" class="hide"></div>

<div class="hide" id="classDumpMenu">
	<li class="dropdown">
		<a id="drop1" href="#" role="button" class="dropdown-toggle" data-toggle="dropdown">Class Dump Options<b class="caret"></b></a>
		<ul class="dropdown-menu" role="menu" aria-labelledby="drop1">
			<li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:refreshClassList()">Refresh all class data</a></li>
			<!--<li role="presentation" class="divider"></li>-->
			<li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:expandClassList()">Expand/collapse the classes</a></li>
		</ul>
	</li>
</div>

<script>

function refreshClassList() {
	$('#classDumpMenu').dropdown('toggle');
	$("#spinner").removeClass("hide");
	localStorage["classList"] = "";
	localStorage["classHTML"] = "";
	classCounter = numClasses = 0;
	doClassDump();
}

function expandClassList() {
	$('.classDetails').toggleClass('fadeOut hide');
	$('#classDumpMenu').dropdown('toggle');
}

function classDumpCompletionHandler() {
	// Fix the UI
	$("#spinner").addClass("hide");
	setTimeout('$("#progressBarWrapper").addClass("fadeOut hide")', 1000);
	
	// Cache the class dump for performnace reasons (class dumps from iSpy server are slow). 
	// Will throw an exception if the the HTML is > 5MB, 2.5MB, or 10MB depending on your browser.
	try {
		localStorage["classList"] = classList;
		localStorage["classHTML"] = $("#dumpDiv").html();
		console.log("Successfully cached the class dump in localStorage");
	} catch(e) {
		console.log("Failed to cache: too big!");
		localStorage["classList"] = "Too big, blame your browser's size limit.";
		localStorage["classHTML"] = "";
	}
	
	// Give the user context-specific links to Class data
	setupContextHelpHandler();

	// Restore the previous state of instance tracking.
	restore_instance_tracker_state(); 

	console.log("Complete!");
}

function doClassDump() {
	// Show the progress bar
	$("#progressBarWrapper").removeClass("fadeOut hide");
	$("#dumpDiv").addClass("hide");
	$("#dumpArea").empty();

	// we want a nice pointer when hovering over class names
	$(".classContextInfo").hover(function() {
		$(this).css('cursor','pointer');
	}, function() {
		$(this).css('cursor','auto');
	});

	$.ajax({
		url: "/api/classes",
		timeout: 30000,
		dataType: "json"
	}).done(function(classes) {
		classList = classes;
		console.log("Done");
		$("#spinner").removeClass("hide");

		// If the classList cached in localStorage matches the class list from the server, we use the cached version for speed.
		// If there's a mismatch, we refresh the class list based on data from the server.
		if(classList == localStorage["classList"]) {
			$("#dumpDiv").html(localStorage["classHTML"]);
			$("#progressBarWrapper").addClass("fadeOut hide");
			$("#dumpDiv").removeClass("hide");
			setupContextHelpHandler();
			$("#spinner").addClass("hide");
			return;
		}

		// We need to turn off (a) the instance tracker, (b) the strace logger, and (c) the msgSend logger.
		// If we don't, this process takes for ever.
		// This will eventually be re-enabled in classDumpCompleteHandler();
		set_instance_tracker_state(0);

		// Ok, let's do it.
		numClasses = classes.length;
		console.log("Got " + numClasses + " classes" );

		// Cycle through the classes, dump dump dumping.
		$.each(classes, function(key, className) {
			// Cache this in a hash
			classType[className] = true;

			// Render the appropriate HTML for this class, then save it into the element "#dumpArea".
			// Upon success, run the inline function as a callback.
			getRenderedClassHTML(className, "#dumpArea", function (data) {
				// Keep track of how many classes we've processed
				classCounter++;
				var percentAmt = (100 * (classCounter / numClasses)) | 0;

				// Update the progress bar
				$("#progressBar").attr("style", "width: " + percentAmt.toString() + "%;")
				
				// If we're done then call the completion handler. This call is made once class dump has finished.
				if(classCounter == numClasses) {
					$("#progressBar").attr("style", "width: 100%;")	
					classDumpCompletionHandler();
				}
					// we want a nice pointer when hovering over class names
				$(".classContextInfo").hover(function() {
					$(this).css('cursor','pointer');
				}, function() {
					$(this).css('cursor','auto');
				});
			});
		});

		// We unhide the class dump pane here so that it's had a chance to populate with enough data to make the entrance look slick.
		$("#dumpDiv").removeClass("hide");
	});
}

$(document).ready(function() {
	// Add a new menu to the menu bar
	$('#menuBarExtraMenu1').append($('#classDumpMenu').html());

	// Grab the list of classes from the iSpy server
	doClassDump();
});

</script>
