<link href="/static/google-code-prettify/prettify.css" rel="stylesheet" type="text/css" />
<script src="/static/google-code-prettify/prettify.js"></script>
<script src="/static/js/jquery.ajaxQueue.min.js"></script>
<script type="text/javascript" src="/static/bootstrap-progressbar/bootstrap-progressbar.js"></script>
<script src="/static/js/common.js"></script>

<style>
.popover {
	width: 700px;
	max-width: 700px;
	height:500px;
	overflow: auto;
}
</style>

<div class="modal" id="modalLoading">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				<h4 class="modal-title" id="statusText">iSpy Class Dump...</h4>
			</div>
			<div class="modal-body">
				<div>
					<div class="progress">
						<div class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" aria-valuetransitiongoal="10" id="progressBar" style="width: 0;">
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="animated fadeIn hide" id="controlsDiv">
		<a class="btn" id="btnExpandAll" href="#" data-toggle="tooltip" data-original-title="Expand all of the data for all the classes">Expand all</a>
</div>

<div id="dumpDiv" class="animated fadeIn hide">
	<?prettify?><pre id='dumpArea' class='prettyprint'></pre>
</div>

<div id="fooBar" class="hide"></div>

<div class="hide" id="classDumpMenu">
	<li class="dropdown">
		<a id="drop1" href="#" role="button" class="dropdown-toggle" data-toggle="dropdown">Class Dump Options<b class="caret"></b></a>
		<ul class="dropdown-menu" role="menu" aria-labelledby="drop1">
			<li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:refreshClassList()">Refresh all class data</a></li>
			<!--<li role="presentation" class="divider"></li>-->
			<li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:expandClassList()">Expand/collapse the classes</a></li>
		</ul>
	</li>
</div>

<script>

// Setup the "Loading..." modal
$('.progress .progress-bar').progressbar({
        transition_delay: 0,
        refresh_speed: 50,
        display_text: 'fill',
        update: function (percent) {
			if(percent == 100) {
        		setTimeout(function () {
        			$('#modalLoading').modal('hide');
        		}, 0);
        	}
        }
    });

$('#modalLoading').modal({
  backdrop: 'static',
  show: true
});



function refreshClassList() {
	$('#classDumpMenu').dropdown('toggle');
	localStorage["classList"] = "";
	localStorage["classHTML"] = "";
	classCounter = numClasses = 0;
	doClassDump();
}

function expandClassList() {
	$('.classDetails').toggleClass('fadeOut hide');
	$('#classDumpMenu').dropdown('toggle');
}

function classDumpCompletionHandler() {
	$("#progressBar").attr("aria-valuetransitiongoal", 100).progressbar();
	// Fix the UI
	// Cache the class dump for performnace reasons (class dumps from iSpy server are slow). 
	// Will throw an exception if the the HTML is > 5MB, 2.5MB, or 10MB depending on your browser.
	try {
		localStorage["classList"] = classList;
		localStorage["classHTML"] = $("#dumpDiv").html();
		console.log("Successfully cached the class dump in localStorage");
	} catch(e) {
		console.log("Failed to cache: too big!");
		localStorage["classList"] = "Too big, blame your browser's size limit.";
		localStorage["classHTML"] = "";
	}
	
	// we want a nice pointer when hovering over class names
	$(".classContextInfo").hover(function() {
		$(this).css('cursor','pointer');
	}, function() {
		$(this).css('cursor','auto');
	});

	// Give the user context-specific links to Class data
	setupContextHelpHandler();

	// Restore the previous state of instance tracking.
	restore_instance_tracker_state(); 

	/* This generates a text (stripped of HTML) version of the class dump.
	var foo=$("#dumpDiv").html();
	$("#txtVersion").append($(foo).text());
	*/

	console.log("Complete!");
}

function doClassDump() {
	$("#dumpDiv").addClass("hide");
	$("#dumpArea").empty();
	$('#modalLoading').addClass("animate");
	$("#progressBar").attr("aria-valuetransitiongoal", 25).progressbar();

	// we want a nice pointer when hovering over class names
	$(".classContextInfo").hover(function() {
		$(this).css('cursor','pointer');
	}, function() {
		$(this).css('cursor','auto');
	});

	// grab the list of classes from the iDevice
	$.ajax({
		url: "/api/classDump",
		timeout: 30000,
		dataType: "json"
	}).done(function(classes) {
		$("#dumpDiv").removeClass("hide");
		$("#progressBar").attr("aria-valuetransitiongoal", 50).progressbar();

		var classCounter = 0 | 0;
		var numClasses = 0 | 0;
		$.each(classes, function(key, classDict) {
			numClasses++;
		});
		console.log("Class dump of " + numClasses + " classes...");

		// We need to turn off (a) the instance tracker, (b) the strace logger, and (c) the msgSend logger.
		// If we don't, this process takes for ever.
		// This will eventually be re-enabled in classDumpCompleteHandler();
		//set_instance_tracker_state(0);

		// Ok, let's do it.
		// Cycle through the classes, dump dump dumping.
		
		// We unhide the class dump pane here so that it's had a chance to populate with enough data to make the entrance look slick.
		$.each(classes, function(key, classDict) {
			var className = classDict["className"];

			// Render the appropriate HTML for this class, then save it into the element "#dumpArea".
			// Upon success, run the inline function as a callback.
			getRenderedClassHTML(className, "#dumpArea", function (data) {}, classDict);
			
			// Keep track of how many classes we've processed
			classCounter++;
			var percentAmt = (100 * (classCounter / numClasses)) | 0;
			console.log(percentAmt);
			if(percentAmt > 50)
				$("#progressBar").attr("aria-valuetransitiongoal", percentAmt).progressbar();
		});
		classDumpCompletionHandler();
	});

	// Grab the list of protocols defined for this app
	$("#progressBar").attr("aria-valuetransitiongoal", 40).progressbar();
	console.log("Protocol dump...");
	$.ajax({
		url: "/api/protocolDump",
		timeout: 30000,
		dataType: "json"
	}).done(function(protocols) {
		$.each(protocols, function(key, protocolDict) {
			protocolName = protocolDict["protocolName"];
			getRenderedProtocolHTML(protocolName, "#dumpArea", function (data) {}, protocolDict);
		});
	});
}

$(document).ready(function() {
	// Add a new menu to the menu bar
	$('#menuBarExtraMenu1').append($('#classDumpMenu').html());

	// Grab the list of classes from the iSpy server
	doClassDump();
});

</script>

