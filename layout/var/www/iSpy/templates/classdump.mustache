<link href="/static/google-code-prettify/prettify.css" rel="stylesheet" type="text/css" />
<script src="/static/google-code-prettify/prettify.js"></script>
<script src="/static/js/jquery.ajaxQueue.min.js"></script>
<script type="text/javascript" src="/static/bootstrap-progressbar/bootstrap-progressbar.js"></script>
<script src="/static/js/common.js"></script>

<style>
.popover {
	width: 700px;
	max-width: 700px;
	height:500px;
	overflow: auto;
}
</style>

<div class="modal" id="modalLoading">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-body" id="modalBody">
				<div class="row">
					<div class="col-md-2">
						<i class="fa fa-cloud-download fa-5x"></i>
					</div>
					<div class="col-md-10">
						<div class="progress">
							<div class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" aria-valuetransitiongoal="10" id="progressBar" style="width: 0;">
							</div>
						</div>
						<div id="smallStatusText">Initializing...</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="animated fadeIn hide" id="controlsDiv">
		<a class="btn" id="btnExpandAll" href="#" data-toggle="tooltip" data-original-title="Expand all of the data for all the classes">Expand all</a>
</div>

<div id="dumpDiv" class="animated fadeIn hide">
	<?prettify?><pre id='dumpArea' class='prettyprint'></pre>
</div>

<div id="fooBar" class="hide"></div>

<div class="hide" id="classDumpMenu">
	<li class="dropdown">
		<a id="drop1" href="#" role="button" class="dropdown-toggle" data-toggle="dropdown">Class Dump Options<b class="caret"></b></a>
		<ul class="dropdown-menu" role="menu" aria-labelledby="drop1">
			<li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:clearCachedClassData()">Clear cached class data</a></li>
			<!--<li role="presentation" class="divider"></li>-->
			<li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:expandClassList()">Expand/collapse the classes</a></li>
		</ul>
	</li>
</div>

<script>

// Don't reference these directly. Instead, use:
// 	var classDump    = getCachedClassDump();
// 	var protocolDump = getCachedProtocolDump(); 
var cachedClassDump;
var cachedProtocolDump;

// The next two functions are a cached interface to the JSON objects representing the class and protocol dumps
function getCachedClassDump() {
	if(cachedClassDump === undefined) {
		cachedClassDump = JSON.parse(localStorage.getItem("classData"));
	}
	return cachedClassDump;
}
function getCachedProtocolDump() {
	if(cachedProtocolDump === undefined) {
		cachedProtocolDump = JSON.parse(localStorage.getItem("protocolData"));
	}
	return cachedProtocolDump;
}

// the user can pick "Clear cached class data" in the UI. It's handled here.
function clearCachedClassData() {
	updateStatus("Checking cache...", 10);
	localStorage.clear();
	$('#classDumpMenu').dropdown('toggle');
}

// reduntant
function expandClassList() {
	$('.classDetails').toggleClass('fadeOut hide');
	$('#classDumpMenu').dropdown('toggle');
}

// Clean up, make things appear/disappear as needed.
function classDumpCompletionHandler() {
	updateStatus("Last stage...", 100);
	prettyPrint();
	$("#dumpDiv").removeClass("hide");

	// we want a nice pointer when hovering over class names
	$(".classContextInfo").hover(function() {
		$(this).css('cursor','pointer');
	}, function() {
		$(this).css('cursor','auto');
	});

	// Give the user context-specific links to Class data
	setupContextHelpHandler();
	localStorage["SHA256HMAC"] = globalAppChecksum;
}


function updateStatus(statusTxt, percent) {
		$("#progressBar").attr("aria-valuetransitiongoal", percent).progressbar();
		console.log(statusTxt);
		if(statusTxt != "") {
			$("#smallStatusText").html(statusTxt + "\n");
		}
}

function render_classDumpIntoDOM () {
	var classCount = 0 | 0;
	var numClasses = localStorage["numClasses"] | 0;
	var classes = getCachedClassDump();

	// Cycle through the classes, dump dump dumping.		
	$.each(classes, function(key, classDict) {
		// Render the appropriate HTML for this class, then save it into the element "#dumpArea".
		// Upon success, run the inline function as a callback.
		classCount++;
		var className = classDict["className"];
		var percentAmt = (100 * (classCount / numClasses)) | 0;
		
		renderClassDataAndAppendToDOMElement(className, "#dumpArea", function (data) {}, classDict);
		
		if(percentAmt > 60 && (percentAmt % 10 == 0)) {
			//updateStatus("", percentAmt); // refresh the progress bar from time to time
		}
	});
}

function render_protocolDumpIntoDOM () {
	var protocols = getCachedProtocolDump();
	$.each(protocols, function(key, protocolDict) {
		protocolName = protocolDict["protocolName"];
		renderProtocolDataAndAppendToDOMElement(protocolName, "#dumpArea", function (data) {}, protocolDict);
	});
}

function doClassDump() {
	// Get the SHA256 checksum of the current iOS app binary.
	// Check our browser's localStorage for a copy of the same checksum.
	// If there's a match, then we've got a cached class dump for this app in our local browser store. Sweet.
	updateStatus("Initializing...", 25);
	$.ajax({
		url: "/api/appChecksum",
		timeout: 30000,
		dataType: "json",
	}).done(function(checksum) {
		// if our cached checksum matches the current app's checksum, great. 
		// now validate that we actually have cached data.
		var isClassDataCached = false;
		globalAppChecksum = checksum["SHA256HMAC"];

		if(	localStorage["SHA256HMAC"] && 
			(localStorage["SHA256HMAC"] == checksum["SHA256HMAC"]) && 
			(localStorage["numClasses"] !== undefined) &&
			(localStorage["classData"] !== undefined) && 
			(localStorage["protocolData"] !== undefined))
		{
			// If we have a sane cache, use it.
			isClassDataCached = true;
		} else {
			// if the cache is invalid in any way, clear it out and start again.
			localStorage.clear();
		}

		// Render the classdump into the browser
		real_ClassDump(isClassDataCached);
	});

}


function real_ClassDump(isDataCached) {
	$("#dumpDiv").addClass("hide");
	$("#dumpArea").empty();
	$('#modalLoading').addClass("animate");

	// we want a nice pointer when hovering over class names
	$(".classContextInfo").hover(function() {
		$(this).css('cursor','pointer');
	}, function() {
		$(this).css('cursor','auto');
	});

	// If we have cached data, use it.
	if(isDataCached) {
		console.log("Size of class dump data in localStorage: " + localStorage.getItem("classData").length);
		console.log("Size of protocol dump data in localStorage: " + localStorage.getItem("protocolData").length);
		updateStatus("Rendering classes...", 33);
		render_classDumpIntoDOM();

		updateStatus("Rendering protocols...", 66);
		render_protocolDumpIntoDOM();

		updateStatus("Finalizing...", 100);
		classDumpCompletionHandler();
	} 
	// No cached data in the browser? We'll pull it from the iDevice.
	else {
		// Grab the list of protocols defined for this app
		updateStatus("Waiting for iDevice...", 33);
		$.ajax({
			url: "/api/protocolDump",
			timeout: 30000,
			dataType: "json"
		}).done(function(protocols) {
			updateStatus("Reading protocol data...", 45);

			// cache the protocol data
			localStorage.setItem("protocolData", JSON.stringify(protocols));

			// count the number of classes
			var numProtocols = 0;
			protocols = getCachedProtocolDump();
			$.each(protocols, function(key, data) {
				numProtocols++;
			});
			console.log("num protocols " + numProtocols);

			// Store the number in localStorage
			localStorage.setItem("numProtocols", numProtocols);

			// add class data to the UI
			updateStatus("Rendering...", 50);
			render_protocolDumpIntoDOM();
			updateStatus("Waiting for iDevice...", 66);
			
			// grab the list of classes from the iDevice
			$.ajax({
				url: "/api/classDump",
				timeout: 30000,
				dataType: "json",
			}).done(function(classes) {
				updateStatus("Class AJAX call finished.", 75);
				// Store the classdump data in our browser cache
				localStorage.setItem("classData", JSON.stringify(classes));

				// count the number of classes
				var numClasses = 0;
				classes = getCachedClassDump();
				$.each(classes, function(key, data) {
					numClasses++;
				});
				console.log("num classes " + numClasses);

				// Store the number in localStorage
				localStorage.setItem("numClasses", numClasses);

				// render the data into browser UI
				updateStatus("Rendering...", 90);
				render_classDumpIntoDOM();

				// call the handler to take care of clean-up
				classDumpCompletionHandler();
			});
		});
	}
}

$(document).ready(function() {
	// Add a new menu to the menu bar
	$('#menuBarExtraMenu1').append($('#classDumpMenu').html());

	// Setup the "Loading..." modal
	$('.progress .progress-bar').progressbar({
        transition_delay: 0,
        refresh_speed: 100,
        display_text: 'fill',
        update: function (percent) {
			if(percent == 100) {
        		$('#modalLoading').modal('hide');
        	}
        }
    });

	// show the modal
	$('#modalLoading').modal({
	  backdrop: 'static',
	  show: true
	});

	// Grab the list of classes from the iSpy server
	doClassDump();
});

</script>

